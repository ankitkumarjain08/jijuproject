import pandas as pd
from concurrent.futures import ThreadPoolExecutor

def fetch_data_chunk(file_path, sheet_name, offset, limit):
    df = pd.read_excel(file_path, sheet_name=sheet_name, skiprows=offset, nrows=limit)
    return df

def find_unmatched_values(chunk_1, chunk_2):
    unmatched_in_chunk_1 = []
    unmatched_in_chunk_2 = []
    
    chunk_2_values = chunk_2.values.tolist()

    for i, row in chunk_1.iterrows():
        if row.values.tolist() not in chunk_2_values:
            mismatched_columns = [chunk_1.columns[j] for j in range(len(row)) if row[j] != chunk_2.iloc[i, j]]
            unmatched_in_chunk_1.append((row.tolist(), mismatched_columns))

    for i, row in chunk_2.iterrows():
        if row.values.tolist() not in chunk_1.values.tolist():
            mismatched_columns = [chunk_2.columns[j] for j in range(len(row)) if row[j] != chunk_1.iloc[i, j]]
            unmatched_in_chunk_2.append((row.tolist(), mismatched_columns))

    return unmatched_in_chunk_1, unmatched_in_chunk_2

def compare_data(file_path_1, file_path_2, sheet_name_1, sheet_name_2, chunk_size):
    chunk_size = int(chunk_size)
    df1 = pd.read_excel(file_path_1, sheet_name=sheet_name_1)
    df2 = pd.read_excel(file_path_2, sheet_name=sheet_name_2)

    total_rows_table_1 = len(df1)
    total_rows_table_2 = len(df2)

    unmatched_values_1 = []
    unmatched_values_2 = []

    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = []
        for offset in range(0, max(total_rows_table_1, total_rows_table_2), chunk_size):
            future_1 = executor.submit(fetch_data_chunk, file_path_1, sheet_name_1, offset, chunk_size)
            future_2 = executor.submit(fetch_data_chunk, file_path_2, sheet_name_2, offset, chunk_size)
            futures.append((future_1, future_2))

        for future_1, future_2 in futures:
            chunk_1 = future_1.result()
            chunk_2 = future_2.result()
            unmatched_in_chunk_1, unmatched_in_chunk_2 = find_unmatched_values(chunk_1, chunk_2)
            unmatched_values_1.extend(unmatched_in_chunk_1)
            unmatched_values_2.extend(unmatched_in_chunk_2)

    total_unmatched = len(unmatched_values_1) + len(unmatched_values_2)
    summary = {
        'total_rows_table_1': total_rows_table_1,
        'total_rows_table_2': total_rows_table_2,
        'total_rows_compared': min(total_rows_table_1, total_rows_table_2),
        'total_unmatched_rows': total_unmatched
    }

    return unmatched_values_1, unmatched_values_2, summary

def compare_excel_files(file_path_1, file_path_2, sheet_name_1, sheet_name_2, chunk_size):
    unmatched_values_1, unmatched_values_2, summary = compare_data(file_path_1, file_path_2, sheet_name_1, sheet_name_2, chunk_size)
    return {
        'unmatched_in_table_1': unmatched_values_1,
        'unmatched_in_table_2': unmatched_values_2,
        'summary': summary
    }
