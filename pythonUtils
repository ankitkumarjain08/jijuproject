import PyPDF4
import logging

# Configure logging
logging.basicConfig(filename='pdf_reader.log', level=logging.ERROR,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def read_pdf(file_path):
    try:
        # Open the PDF file
        with open(file_path, 'rb') as file:
            # Create a PDF reader object
            pdf_reader = PyPDF4.PdfFileReader(file)
            
            # Check if the PDF is encrypted
            if pdf_reader.isEncrypted:
                try:
                    pdf_reader.decrypt('')
                except Exception as e:
                    logging.error(f"Failed to decrypt PDF: {e}")
                    return None
            
            # Get the number of pages
            num_pages = pdf_reader.getNumPages()
            
            # Extract text from each page
            text = ""
            for page_num in range(num_pages):
                try:
                    page = pdf_reader.getPage(page_num)
                    text += page.extractText()
                except Exception as e:
                    logging.error(f"Failed to extract text from page {page_num}: {e}")
                    continue
            
            return text

    except FileNotFoundError:
        logging.error(f"File not found: {file_path}")
    except PyPDF4.utils.PdfReadError as e:
        logging.error(f"Error reading PDF: {e}")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")

    return None

# Example usage
file_path = 'example.pdf'  # Replace with your PDF file path
pdf_text = read_pdf(file_path)
if pdf_text:
    print(pdf_text)
else:
    print("Failed to read PDF.")

-------------------------------------------------------------------------------------------------------------------------

import pdfplumber

def extract_continuing_table_after_heading(pdf_path, heading_text):
    with pdfplumber.open(pdf_path) as pdf:
        tables = []
        heading_found = False

        for page in pdf.pages:
            text = page.extract_text()
            if text is None:
                continue

            lines = text.split('\n')

            if not heading_found:
                for line in lines:
                    if heading_text.lower() in line.lower():
                        heading_found = True
                        break

            if heading_found:
                current_tables = page.extract_tables()

                if current_tables:
                    for table in current_tables:
                        combined_table = []
                        current_header = None
                        for row in table:
                            if any(cell is not None and cell != '' for cell in row):
                                if current_header is None:
                                    current_header = [cell for cell in row if cell is not None and cell != '']
                                else:
                                    if len(row) > 1 and all(cell is None or cell == '' for cell in current_header[1:]):
                                        current_header.append(row[0])
                                    else:
                                        combined_table.append(current_header)
                                        current_header = [cell for cell in row if cell is not None and cell != '']
                            else:
                                if current_header is not None:
                                    combined_table.append(current_header)
                                    current_header = None

                        if current_header:
                            combined_table.append(current_header)

                        filtered_table = [row for row in combined_table if any(cell for cell in row)]

                        if filtered_table:
                            tables.append(filtered_table)

                if tables and current_tables:
                    last_row = tables[-1][-1]
                    first_row_of_next_table = current_tables[0][0] if current_tables else None

                    if first_row_of_next_table and last_row and first_row_of_next_table[0] == last_row[0]:
                        tables[-1].extend(current_tables[0])

        return tables

pdf_path = '/content/depositary-receipts-opportunity-product-paper.pdf'

example_headings = [
    "User Interface",
    "API"
]

for heading in example_headings:
    tables_data = extract_continuing_table_after_heading(pdf_path, heading)
    if tables_data:
        print(f"\nExtracted Tables for heading '{heading}':")
        for idx, table in enumerate(tables_data):
            print(f"\n--- Table {idx + 1} ---")
            for row in table:
                filtered_row = [cell for cell in row if cell is not None and cell != '']
                if filtered_row:
                    print(filtered_row)
            print("\n--- End of Table ---")
    else:
        print(f"\n{heading}: Table not found.")

------------------------------------------------------------------------------------------------------------------------

import random
import string

def generate_random_string(length):
    letters = string.ascii_letters  # Contains both lowercase and uppercase letters
    return ''.join(random.choice(letters) for _ in range(length))

# Example usage:
random_string = generate_random_string(50)
print(random_string)




def generate_random_number(digits):
    try:
        if digits < 1:
            raise ValueError("Number of digits should be at least 1")
        start = 10 ** (digits - 1)
        end = (10 ** digits) - 1
        return random.randint(start, end)

    except ValueError as e:
        return str(e)
    except Exception as e:
        return f"An error occurred: {str(e)}"


# Example usage:
random_number = generate_random_number(3.0)
print(random_number)


def generate_alphanumeric_string(length):
    try:
        if length < 1:
            raise ValueError("Length should be at least 1")
        characters = string.ascii_letters + string.digits  # Letters (both cases) and digits
        return ''.join(random.choice(characters) for _ in range(length))

    except ValueError as e:
        return str(e)
    except Exception as e:
        return f"An error occurred: {str(e)}"


# Example usage:
alphanumeric_string = generate_alphanumeric_string(10)
print(alphanumeric_string)
--------------------------------------------------------------------------------------------------------------------
import os
import shutil
import zipfile
from datetime import datetime

# Get the current time (hour and minute)
now = datetime.now()
timestamp = now.strftime("%Y-%m-%d_%H-%M")
report_folder = f"../nextgen-python/Archive_Reports/AutomationReport_{timestamp}"

# Create the folder with today's date and time
os.makedirs(report_folder, exist_ok=True)

# Move files from the Results folder to the newly created folder
results_folder = "../nextgen-python/Results"
for item in os.listdir(results_folder):
    item_path = os.path.join(results_folder, item)
    destination = os.path.join(report_folder, item)
    if os.path.isfile(item_path):
        shutil.move(item_path, destination)
    elif os.path.isdir(item_path):
        shutil.move(item_path, destination)

# Append the new folder to Archive_Reports.zip
zip_path = "../nextgen-python/Archive_Reports.zip"
with zipfile.ZipFile(zip_path, 'a', zipfile.ZIP_DEFLATED) as archive:
    for root, _, files in os.walk(report_folder):
        for file in files:
            file_path = os.path.join(root, file)
            archive.write(file_path, os.path.relpath(file_path, os.path.dirname(report_folder)))

print(f"Files moved and added to {zip_path} successfully.")

----------------------------------------------------------------------------------------------------

REM Zip the Archive_Reports directory using PowerShell
set "zip_path=..\nextgen-python\Archive_Reports.zip"
powershell -command "if (Test-Path '%zip_path%') { Add-Type -AssemblyName System.IO.Compression.FileSystem; [IO.Compression.ZipFile]::Open('%zip_path%', 'Update').CreateEntryFromFile('%report_folder%', 'AutomationReport_%timestamp%'); } else { Add-Type -AssemblyName System.IO.Compression.FileSystem; [IO.Compression.ZipFile]::CreateFromDirectory('%report_folder%', '%zip_path%'); }"

------------------------------------------------------------------------------------------

REM Zip the Archive_Reports directory using tar
set "zip_path=..\nextgen-python\Archive_Reports.zip"

REM Check if the zip file already exists
if exist "%zip_path%" (
    REM If the zip file exists, append the new folder to the existing zip
    tar -uf "%zip_path%" -C "..\nextgen-python\Archive_Reports" "AutomationReport_%timestamp%"
) else (
    REM If the zip file does not exist, create a new zip file
    tar -cf "%zip_path%" -C "..\nextgen-python\Archive_Reports" "AutomationReport_%timestamp%"
)

REM Append the new folder to Archive_Reports.zip using 7z
REM Ensure 7z is installed and the path is added to the system PATH environment variable
set "zip_path=..\nextgen-python\Archive_Reports.zip"
7z a -tzip "%zip_path%" "%report_folder%\*" -r

echo Files moved and added to %zip_path% successfully.

---------------------------------------

"C:\Program Files\7-Zip\7z.exe" u "..\nextgen-python\Archive_Reports.zip" "..\nextgen-python\Archive_Reports\*"


-----------------------------------------

for /f "tokens=2 delims==" %%a in ('wmic os get localdatetime ^| find "."') do (
    set "datetime=%%a"
    set "year=!datetime:~0,4!"
    set "month=!datetime:~4,2!"
    set "day=!datetime:~6,2!"
)

REM Get the current time (hour, minute) using wmic
set "hour=!datetime:~8,2!"
set "minute=!datetime:~10,2!"

REM Create a timestamp and the report folder
set "timestamp=!year!-!month!-!day!_!hour!-!minute!"

---------------------------------------------------------------------------------------

rowindex = int(rowindex)

    # Load the workbook and access the specified sheet
    wb = openpyxl.load_workbook(path)
    ws = wb[sheetname]  # Access the sheet by name
    
    # Get the headers from the first row
    headers = [cell.value for cell in ws[1]]  # Read the first row

    # Check if the columnName exists in the headers
    if columnName not in headers:
        raise ValueError(f"Column header '{columnName}' not found in the headers.")

    # Find the index of the specified column header and adjust to 1-indexed
    columnindex = headers.index(columnName) + 1

    # Access the cell using the specified row index and the found column index
    cell_obj = ws.cell(row=rowindex + 1, column=columnindex)
    
    return cell_obj.value
---------------------------------------------------------
if __name__ == "__main__":
    # Define the path to the Excel file and the sheet name
    path = "test_data.xlsx"  # Replace with the actual path to your Excel file
    sheetname = "Sheet1"  # Replace with the actual sheet name in your Excel file
    rowindex = 2  # Specify the row number (1-indexed)
    columnName = "Name"  # Replace with the column header name

    # Call the function and print the value
    try:
        value = read_cell_value_by_header(path, sheetname, rowindex, columnName)
        print(f"The value in row {rowindex} under the '{columnName}' column is: {value}")
    except ValueError as e:
        print(f"Error: {e}")

